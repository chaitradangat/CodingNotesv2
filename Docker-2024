**Docker Deep Dive 29 of 419 completed

*Docker Engine, Docker Runtime

*Docker daemon, Docker Client

*OCI Open Container Initiative specification
 . image-spec
 . runtime-spec

**Docker Deep Dive 57 of 419 completed

*Docker commands
 . dockercli -Version
 . docker image ls
 . docker container ls
 . docker system info
 . docker version
 . docker --version
 . docker-compose --version
 . docker-machine --version
 . notary version - investigate which command is this

* Best Practice - Do not install Docker under root user on Linux OS

*After installing docker two major components are installed
 . docker daemon / server / engine
 . docker client

**Docker Deep Dive 80 of 419 completed
. docker container run -it ubuntu:latest /bin/bash - spins up new docker container and runs bash
. docker container run -it microsoft/powershell:nanoserver pwsh.exe
. docker container exec -it vigilant_borg bash - attach to running container
. docker container exec -it pensive_hamilton pwsh.exe - attach to running container
. docker container stop vigilant_borg - stop container
. docker container rm vigilant_borg - delete or remove the docker container
. Ctrl + PQ - exit container interactive shell
. docker container ls -a - lists all containers even those which are stopped

*Containerizing an app
. docker build -t test:latest - run this command in the directory containing the app docker file
. docker container run -d \
  --name web1 \
  --publish 8080:8080 \
  test:latest - runs docker container from the image built with label test-latest

*Docker Engine
. Docker client
. Docker daemon
. containerd
. runc

*New Docker Architecture 
. client 
. daemon
. containerd
. shim - for daemonless containers when the daemon needs to be updated or maintained
. runc

*runc
. It is implementation of OCI container runtime spec

*containerd
. used to manage the container life cycle
. creates OCI compliant images from docker file / instructions passed by the daemon
. the OCI compliant images are passed onto the runc to spin up new containers

**Docker Deep Dive 111 of 419 completed

*Docker Images
. images are build-time constructs as opposed to containers which are run-time constructs
. image cannot be deleted until all containers running the image are removed
. docker images are made of loosely connected layers

*Containers do not contain their own kernel but use kernel shared by the Host OS

*Image registries
. Image registry can contain multiple image repositories which inturn can contain multiple images
. image registy example : hub.docker.com

*docker image command
. docker image ls--filter dangling=true
. docker image prune -a - removes unused images with no attached container instances

**Docker Deep Dive 113 of 419 completed

*Docker Image
. docker image inspect <imagename>
. docker history <imagename>

**Docker Deep Dive 116 of 419 completed

*Docker Container
. Container is runtime instance of an image
. Containers share the OS or kernel of the host they are running on

*Docker container commands
. docker container run <image> <commands>
. docker container run ubuntu /bin/bash
. container run-it microsoft/powershell:nanoserver pwsh.exe
. docker container run alpine:latest sleep 10

**Host can be anything laptop, server, vm in cloud - which can run a vm or container

**Linux commands
. usermod-aG docker <user> : add user to the docker user group
. systemlctl restart docker : restart docker

*Docker container commands
. docker container exec -it 3027eb644874 bash - reattach to container shell if the container is still running


**Docker Deep Dive 138 of 419 completed

*Docker Container Life Cycle

*Self healing containers with restart policy
. always
. unless-stopped
. on-failed
. docker container run --name cnt1 -it --restart always microsoft/powershell:nanosever


*Running docker container in background
. docker container run -d --name webserver -p 80:8080 nigelpoulton/pluralsight-docker-ci
. port mappings are expressed as host-port:container:port
. docker container rm $(docker container ls -aq) -f - forceremoves all containers which are running
 
**Docker Deep Dive 145 of 419 completed

*Jargon 
. muti stage builds
. Docker Compose, Docker Stacks

*Dockerizing Applications
. The directory containing the application is called the build context.
. Its common practice to keep the docker file in the root directory of build context.
. The name of `Dockerfile` is case-sensitive.
. Dockerfile contains the instructions for the docker host engine to build image from the image file Dockerfile.
. All docker files start with FROM keyword which forms the base layer for of the docker image


. docker image build -t web:latest . - builds docker image based on Dockerfile located at build context `.`
. docker login
. docker image tag web:latest nigelpoulton/web:latest  -> retag docker image with repo name before pushing
. docker image push nigelpoulton/web:latest

**Docker Deep Dive 158 of 419 completed

. # is used for adding comments in Dockerfile, all non-commented lines are INSTRUCTIONS in docker
. docker image history <imagename>

*Multistage builds
. COPY --from=storefront /usr/src/atsea/app/react-app/build/ .
. COPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .
. COPY --from command is used to only copy the application code from build images

*Docker best practices
. leverage the build cache
. cache-hit : when the instructions are same older image with same instruction is re-used as an layer
. cache-miss : new image is built
. ignore the cache by passing --no-cache=true flag during build
. --squash image which has multiple layers , however this disables sharing of the image as layers in other builds
. apt-get install no-install-recommends - installs only the required packages

*Docker commands
. -t flag tags the image, and the -f flag lets you specify the name and location of the Dockerfile.


**Docker Deep Dive 162 of 419 Chapter containerizing an app completed!

*Deploying apps with docker compose
. docker compose is an external tool sitting on top of the docker host to spin up multi container apps
. single engine mode
. swarm mode
. docker-compose --version

*Keys in the docker compose yaml file
. version : version of docker compose file format
. services : used to define various applications/services
. each service is deployed in separate container
. networks : networks key tells docker to create new network
. by default bridge networks are used by docker to connect containers on the same host
. volume : used by docker to create volumes / persistent storage

**Docker Deep Dive 182 of 419 completed
. docker network ls
. docker volume ls
. docker compose up &
. docker-compose down
. docker-compose ps -a -> lists all running or stoppoed containers
. docker-compose top - list processes running inside running containers
. docker-compose stop - stops running containers
. docker-compose restart
. docker volume inspect counterapp_counter-vol | grep Mount

**Docker Deep Dive 202 of 419 completed
**Docker Swarm
. swarm made of two components
. secure cluster
. orchestration engine
. swarm cluster -> etcd database, service/tasks that wrap the worker, manager nodes
. worker, manager nodes -> are docker hosts wrapped in service

. docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377
. docker swarm join-token worker
. docker swarm join-token manager
. docker swarm update --autolock=true prevents earlier restarted managers from direct access to swarm
. docker swarm unlock <key> to unlock swarm to add restarted node
. docker service create --name web-fe -p 8080:8080 --replicas 5 nigelpoulton/pluralsight-docker-ci
. docker service ls
. docker service scale web-fe=10


Itz Friday!!

**Docker Deep Dive 213 of 419 completed

. docker servcie rm <servicename>
. docker network create -d overlay uber-net
. overlay creates new layer 2 network on top of underlying network(s)
. docker network ls

*publishing port on nodes modes
. ingress mode
. host mode

. docker service update --image <imagename:new tag> --update-parallelism 2 --update-delay 20 uber-svc -> rolling update service two replicas at a time with delay of 20 sec
. docker service logs <servicename> --log-driver <driverchoice json-file, journald, etc> -> displays logs from all replicas of the service

**Docker Deep Dive 219 of 419 completed

**Docker Networks
. Container Network Model
. libnetwork -> docker's implementation of the CNM
. drivers

**Container Network Model
. sandbox -> ethernet interface, ports, routing table, DNS config
. endpoint -> virtual ethernet interface (veth) , connects sandbox to networks
. network -> software implementation of switch (802.1d bridge)

**libnetwork
. native service discovery
. ingress-based container load balancing
. network control plane
. management plane

*drivers
. data plane

*built in or local drivers
. bridge
. overlay
. macvlan

** Single-host bridge networks
. docker network ls
. docker network create-d bridge localnet
. docker port web

**Docker Deep Dive 230 of 419 completed

** Multi host overlay networks
. docker network create -d macvlan --subnet=10.0.0.0/24 --ip-range=10.0.0.0/25 --gateway=10.0.0.1 -o parent=eth0.100 macvlan100

. docker container logs <containername> -> standalone container logs
. docker service logs  <servicename> -> swarm container logs

*Service Discovery
. service discovery allows all swarm services and containers to find find each other by name given they are on the same network
. under the hood dns resolver in each container and the embedded dns server helps with service discovery
. docker container run -it --name c1 --dns=8.8.8.8 --dns-search=dockercerts.com alpine sh -> custom dns server

Tuesday!

**Docker Deep Dive 243 of 419 completed

*Ingress Load Balancing
. docker swarm supports two publishing modes
. ingress mode -> containers have access to each other even though the containers dont have same service
. host mode -> only containers with same service have access to each other
. docker network prune
. docker network rm

*The Kubernetes Book pg 18 of 308
. container runtime interface -> to make different container provider technologies pluggable
. containerd -> default kubernetes conatiner runtime
. Kubernetes is both of the following : cluster, orchestrator

*Kubernetes Cluster
. contains one or more nodes that provide cpu, memory, other resources.
. kubernetes cluster nodes are of two types :
. control plane nodes -> must always be linux
. worker nodes -> can be windows / linux

*The Kubernetes Book pg 22 of 308

. control plane nodes implement Kubernetes intelligence
. every cluster needs atleast one control plane node
. control plane node -> api server, scheduler, controllers
. worker nodes are for running applications

*Services inside the control plane

* API Server
. All requests to change and query the state of cluster go through API Server.
. All internal Kubernetes services communicate with each other via the API server.
. API Server is the front end of Kubernetes

* Deploying or updating an app using Kubernetes follows this process:
1. Describe the requirements in a YAML configuration file
2. Post the configuration file to the API server
3. The request will be authenticated and authorized
4. The updates will be persisted in the cluster store
5. The updates will be scheduled to the cluster

* Cluster Store
. Cluster store holds desired states of all applications and cluster components
. it is based on the etcd distributed database.
. all control plane nodes have a copy of the etcd database

*Kubernetes Controllers -> controller manager controls all controllers
. Deployment Controller
. Statefulset Controller
. ReplicaSet Controller
. controllers run as background watch loops re-conciling desired and actual states

*Kubernetes scheduler
. 
