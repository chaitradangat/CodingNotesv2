All Microsoft Azure related notes

**Azure App Service Plan
. pricing tiers
. deployment slots
. deployment slot swapping
. github actions
. scale up scale down
. webjobs

**Azure Container Instances (ACI)

. key value dataw
. graph databases


***Important -> Complete all exercises from az-204 modules

**https://learn.microsoft.com/en-us/credentials/certifications/azure-developer/?practice-assessment-type=certification
Implement Caching for Solutions
* Types of Redis available on azure
. Redis OSS
. Redis Enterprise

* Caching application patterns
. Data cache / cache-aside
. Content cache
. Session store
. Task queueing
. Distributed Transactions

*Tiers
. Basic, Standard, Premium, Enterprise, Enterprise Flash.

*
. Redis cache name shud be unique.
. The cache shud be located near the application region.

* Hostname, port, access key.

**Activity log in redis cache for Azure lists all operations performed on the redis cache database.

**Azure Content Delivery Network
. Ideal for static content, can also be used with dynamic content.
. Edge servers, point of presence locations.
. Default TTL is 7 days.
. Ideal for new product launch with heavy traffic to server / endpoint.

*CDN Caching
. Rule-based
. Query string based caching
. Cache-Control header with TTL value

*CDN cache purging
. az cdn endpoint purge \
    --content-paths '/css/*' '/js/app.js' \
    --name ContosoEndpoint \
    --profile-name DemoProfile \
    --resource-group ExampleGroup

*Geofiltering - disallow content is specific regions or geography

* CdnManagementClient 

**Troubleshoot solutions by using Application Insights
. Application Insights is an extension of Azure Monitor
. Application Performance Monitoring (APM) features

. Live Metrics, Availibility, Usage, Smart detection, Application Map, Distributed Tracing.
. Type of Data : Metrics, Telemetry, Logs
. Kusto queries
. Preaggregated metrics - standard metrics
. Detailed Metrics - Log based metrics
*Availibility Tests 
. OpenTelemetry
. 100 availibility tests per application insights resource
. Standard Test, Custom Trackavailibility() test, URL ping test, 

*Application Map
. Components, external dependencies.
. Mapped via http calls made by resources with application insights enabled.
. Cloud role name to distinguish or name the components in application map.


**Develop message-based solutions
*Azure Message Queues : Queues are usually used to create backlog of work to process asynchronously.
. Azure Service Bus, Azure Storage Queue
. Azure Messaging Infrastructure, Azure Storage Infrastructure

*Azure Service Bus
. Enterprise messaging solution
. Message queues, publisher subscriber, topics
. Messaging scenarios : Messaging, decouple applications, topics and subscription, Message sessions.
. Basic, Standard, Premium tiers
. Namespace-> Topic -> Queue
. Dead letter queue, deferral queue
. Duplicate detection
. Uses AMQP, HTTP Rest protocol
. Azure service bus entities : queue, topics, subscriptions, (rules & actions)
. Receive delete, peek lock
. Message = Payload + metadata

*Azure Storage Queue
. Storage Account, Queue, Messages
. Default Message TTL is seven days
. The read/ dequeued message must be deleted by consumer by sending delete command/request after reading the message

**Develop event-based solutions
. Azure Event Grid, Azure Event Hub

*Azure Event Grid
. No guarantee of sequence of events published by event grid, they can be out of order
. Uses HTTP, MQTT (message queueing telemetry transport) protocol
. Publisher(Application / event source) , Partners(Publish / Consume events), Events, Event Source, Topics, Subscription, Event Handlers
. Max event size 1 MB increments of 64KB
. Managed Identity, Event Hubs Data Sender Role, RBAC
. Event Grid event schema, Cloud Event Schema
  . Subject : path to resource where the event occured 
. Dead letter queue
. Retry policy based on : delivery attempts, event TTL
. Output batching to improve efficiency
. Delayed delivery
. WebHooks
. Filter events by : event type, subject, advanced fields or operators.
. Exercise: Create topic, event subscriber, send event, read event using powershell

*Azure Event Hubs
. BigData streaming, event ingestion service.
. Supports AMQP, Apache Kafka, HTTP protocols.
. Apache Kafka, Azure Schema Registry, Stream Analytics.
*Azure Event Hubs key components
. Producer application : application producing events which are ingested by the hub.
. Namespace(can contain more than one hub)
. Event Hub / Kafka Topic: can contain one or more partition
. Partitions : used for scaling, parallel streaming of events
. Consumer applications : Kafka consumer clients / Azure Event Hubs SDK clients reading by maintaining an offset.
. Consumer group : logical grouping of comsumers having independent offsets.
*Event Hubs Capture
. Capture data in Apache Avro forma
*Throughput Units
* Control Access
. Microsoft Entra ID, Shared Access Signature, Managed Identity,

**AZ-204: Implement API Management
. Jargon: API Gateway, backend API, Subscriptions, Product(group of related APIS), 
. Components: API Gateway, Management Plane(Admin Interface), Developer Portal
. Open product, Protected product(needs subscription to acceess APIs in the product)
. Groups : Administrators, Developers, Guests.
. Policies : executed on the request or response of the API, in form of text or expressions
. Policy scope : Global, Product-specific, API-specific, API operation-specific
*API Gateway(Data Plane)
. Managed, Self hosted Gateway
*Azure API Management Policies 
. Policies are a collection of statements / configuration
*Policy Definition or Configuration
. inbound, backend, outbound, on-error
    <policies>
     <inbound/>
     <outbound/>
     <backend/>
     <on-error/>
    </policies>
. Policy Expressions : C# code, context object
. Policy scopes, local and api level
. Advanced Policies : Control flow, forward request, limit concurrency, log to event hub, mock response, retry, return response
*Secure API with subscription
. Subscription based on keys, ip whitelisting, certificates,OAuth 2.0
. Subscription scope : all api, product, single api
. Verify certificate based on : Issuer, Subject, Thumbprint, Expiry date
*Resource created is called Azure API Management in Azure.

**Implement secure Azure solutions
. Azure Key-vault, Managed Identity, Azure App Configuration.

*Implement Azure key vault
. Jargon : Keys(Encryption keys), Secret, Certificates , Vaults, HSM(Hardware Security Module)
. Store and access secret.
. Containers : Vault, HSM
. Secrets Management, Key Management, Certificate Management
. Tiers : Standard, Premium
. Access : Microsoft Entra ID, RBAC, Azure Key Vault access policy, managed identity,.
. Soft delete, purge protection.
*Implement Managed Identities :  Removes the need to manually manage credentials.
. Jargon: Azure Resource Manager, Microsoft Entra Tenant, Microsoft Entra ID, Azure Instance Metadata Service, Managed Identity Operator, Azure.Identity
. User-assigned managed identity, system-assigned managed identity.
. Request a JWT token by passing client ID and certificate, DefaultAzureCredential
*DefaultCredentials are read from
. environment, managed identity of the underlying resource, Visual Studio login, azure cli or powershell login, Interactive Login
*ChainedTokenCredential: has fallback mechanism if primary call fails eg: var credential = new ChainedTokenCredential(new ManagedIdentityCredential(), new AzureCliCredential());

*Implement Azure App Configuration : https://learn.microsoft.com/en-us/credentials/certifications/azure-developer/?practice-assessment-type=certification
. Jargon : Encryption of information at rest, Encryption of information in transit.
. Used to store less sensitive data unlike key-vault used to store secrets.
. Centrally manage app configuration and  application features(feature flags).
. Application Keys Hierarchy Representation
  AppName:Service1:ApiEndpoint
  AppName:Service2:ApiEndpoint
. Key labels used for the same key across different environments or versions of the application.
*Azure Application Feature Management using appsettings.json example 
"FeatureManagement": {
    "FeatureA": true, // Feature flag set to on
    "FeatureB": false, // Feature flag set to off
    "FeatureC": {
        "EnabledFor": [
            {
                "Name": "Percentage",
                "Parameters": {
                    "Value": 50
                }
            }
        ]
    }
}
*Secure App configuration using
. Customer-managed keys(not sure what this is), private endpoints, managed identities.
*Private endpoint
. The app configuration is access over internal(private) virtual network not available to the internet.
. On-premise applications can access the endpoint only over a VPN, express route etc.
*Managed Identities
. System assigned managed identity, User assigned managed identity
. az appconfig identity create --name <name> --resource-group <rgname>
. az appconfig identity assign --name <name> --resource-group <rgname> --identities <path to user defined managed identities>

**Implement containerized solutions
. Azure Container Registry, Azure Container Instances, Azure Container Apps.
* Azure Container Registry
. Jargon : ACR Tasks, Geo replication(multiple copies at different countries in same region), ACR Task Context, Helm Chart
. Store container images, automate builds and deployment.
. Azure Container Registry(ACR) is a private docker registry.
. ACR Tiers : Basic, Standard, Premium
. ACR Tasks : Quick task, Auto triggered tasks, Multi step tasks
. az acr build
. az acr task create
. az acr run
* Run container images in Azure Container Instances
. Container engine as a service.
. Container group : collection of containers which get scheduled on the same host.
. Deployment : arm templates, yaml file.
. az container create
. containerized tasks
. Container restart policy: Always, Never, OnFailure
. Set Environment Variables : --env, secureValue parameter in yaml file
. volumes
* Implement Azure Container Apps
. Jargon: Authentication Flow, server flow, client flow, revision-scope changes, Dapr (distributed application runtime)
. Deploy applications on serverless platform that runs on top of Azure Kubernetes Service.
. Serverless container service.
. Scale based on KEDA supported scale trigger
. Dapr Integration
. az containerapp env create \
    --name $myAppContEnv \
    --resource-group $myRG \
    --location $myLocation
. az containerapp create \
    --name my-container-app \
    --resource-group $myRG \
    --environment $myAppContEnv \
    --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
    --target-port 80 \
    --ingress 'external' \
    --query properties.configuration.ingress.fqdn
. Configuration: arm template configuration, changes to it forces revision of container.
. az containerapp update
. az containerapp revision list
. Secrets are at application scope and not at revision scope
. Dapr integration with container apps
. Dapr components : the container names in the scopes array define which component is loaded.

**Develop solutions that use Azure Cosmos DB
*Explore Azure Cosmos DB
. Jargon : Request Units,
. Globally distributed database system, supports multiple regions at once.
. Hierarchy : Azure CosmosDB account -> Azure CosmosDB Database -> Azure CosmosDB container -> collection, table, graph.
. Data is stored in one or more servers called partitions.
. Physical partition 50 GB, Logical partition 20 GB.
. Consistency levels : 
  . Strong : highest consistency always latest data
  . Bounded staleness : configurable lag between regions
  . Session : single session write read consistency
  . Consistent prefix : consistency maintained at transaction level
  . Eventual consistency : weakest form only to be used for non-critical data such as likes, reshares, comments
. Database APIs : NoSQL, MongoDB, Cassandra, PostgreSQL, Gremlin, Table
* Work with Azure Cosmos DB
. Client-side and Server-side programming with Azure Cosmos DB
. Azure CosmosDB Account -> Azure CosmosDB Database -> Container* -> Item*
. Container -> Collection, Graph, Table. Item -> Document, Edge, Row.
. az group create --location <myLocation> --name az204-cosmos-rg
. az cosmosdb create --name <myCosmosDBacct> --resource-group az204-cosmos-rg
. az account list-locations -o table
. az cosmosdb keys list --name <myCosmosDBacct> --resource-group az204-cosmos-rg
. az group delete --name az204-cosmos-rg --no-wait
. When defining a stored procedure in the Azure portal, input parameters are always sent as a string to the stored procedure. 
. Stored Procedures, Stored Procedures with parameters, Transactions.
. Triggers and User defined functions
. Pre-triggers, Post-triggers
. Change Feeds in Azure CosmosDB
. Change feed pull model and push model
. Delete operations are not saved in change feed, use  soft delete with TTL instead
. Azure function trigger for Azure Cosmos DB
. Monitored container, lease container, compute instance, delegate(code)

**Develop solutions that use Blob storage
* Explore Azure Blob storage
. Jargon : Storage Account, Container, Blob
. Blob storgae is used for saving large amount of unstructured data.
. Azure Storage Account -> Container -> Blob
. Tiers : Standard, Premium
. Premium : block blobs, page blobs, file shares.
. Access Tiers : Hot, Cool, Cold, Archive(Tier)
. https://<storage-account-name>.blob.core.windows.net/<container-name>
. Blobs : block blobs, append blobs, page blobs
. Block blobs : individually managed blobs
. Append blobs : Block blobs optimized for appnding data
. Page blobs : Random read and write eg. VHD format hard disk files
. All blob data is encrypted at rest by default.
. The encryption can be by microsoft managed keys, customer managed keys or customer provided keys.
. Client-side encryption : the data is encrypted on client side using the .NET client SDK before it is being uploaded and is decrypted while the blob is being downloaded while reading.
* Manage the Azure Blob storage lifecycle
. Jargon : Rehydrate blob / data, Blob snapshots
. Lifecycle Management: Rule based policy : set of rules defined in a json format
. Can be appied at storage account, container, individual blob level
. az storage account management-policy create
. Archive tier is offline tier.
. Rehydration Priority : x-ms-rehydrate-priority, Standard, High
. Rehydrate blob by copying data to higher tier container/storage account, or modify the blob/container tier
* Work with blob storage
. BlobServiceClient, BlobContainerClient, BlobClient

**AZ-204: Implement Azure Functions
. Jargon : Hosting options, bindings, triggers, Azure Virtual Network, App Service Environment (ASE).
* Explore Azure Functions
. Data processing, systems integration
. Azure Functions, Logic Apps, Web Jobs
. Triggers : to start execution of the function
. Bindings : For input and output of data
. Orchestration : Collection of functions or steps
. Triggers
  Timer
  Azure Storage queues and blobs
  Azure Service Bus queues and topics
  Azure Cosmos DB
  Azure Event Hubs
  HTTP/WebHook
  Azure Event Grid
*Azure functions hosting options
 . Consumption plan, flex consumption plan, premium plan, dedicated plan, container apps
****Pending Revisit the various azure function hosting plans and differences between them.
*Develop Azure Functions
. jargon : attribute constructor, principle of least privilage
. A function app provides an execution context in Azure in which your functions run
. host.json, local.settings.json(used only for local development of azure functions)
. Triggers(single), Bindings(input output both multiple). 
. Binding is way to declaratively connect another resource to function.
. Binding direction
*Connect functions to Azure services
. Environment Variables in application settings(app service), local.settings.json, managed identity
. Create azure function locally : vscode, azure function extension, .net runtime, C# extension

**Implement Azure App Service web apps
*Examine Azure App Service
. az webapp list-runtimes --os-type linux -o table
.









