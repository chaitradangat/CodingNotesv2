**React and React Native Pg 34 of 606
. React Component API
. React DOM API

*React Component
. lifecycle -> hooks
. data
. events
. jsx

*React Component -> Renderer -> Render Target
. component -> react dom -> browser
. component -> react native -> mobile device
. component -> react desktop -> desktop/laptop
.
.
.

**React and React Native Pg 38 of 606

*Rendering with JSX
. render() function takes jsx as argument
. 

**React and React Native Pg 43 of 606
. React needs root element in the jsx for rendering
. {this.props.children} is used to render the child component inside the custom component
. React class attributes and namespaces

**React and React Native Pg 64 of 606
. array.map((i) => { })
. Object.Keys(i).map((object) => {})
. JSX Fragments using empty <> </> or <div> </div> in fragment custom component elements
. JSX : Javascript XML

*Component Data
. properties
. state
. context

 state = {
    first: false,
    second: true,
  };
const { first, second } = this.state;

//changing the state of the component using setTimeout()

state = {
    heading: "React Awesomesauce (Busy)",
    content: "Loading...",
  };
const { heading, content } = this.state;

setTimeout(() => {
      this.setState({
        heading: "React Awesomesauce",
        content: "Done!",
      });
    }, 3000);

*Default / static state properties

static defaultProps = {
    disabled: false,
    text: "My Button",
  };

 const { disabled, text } = this.props;

. properties are immutable unlike state which keeps changing all the time


**React and React Native Pg 84 of 606
. component properties are declared inside the render function
. component properties can be assigned via attributes when using the component in jsx

* Stateless components
. Pure functional components

* Container components
. Stateful components are called container components
. Container components de-couple the data fetching from the component rendering using child components

function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(["First", "Second", "Third"]);
    }, 2000);
  });
}

. For data that is global to the application, you can use `context` to avoid lots of code being written to share data

* React context
. provider 
. consumer

 React.createContext("permissions");

* React Hooks / LifeCycle
. useState()


. export default function App() {
  const [name] = React.useState("Adam");
  const [age] = React.useState(35);
  return (
    <>
      <p>My name is {name}</p>
      <p>My age is {age}</p>
    </>
  );

 . array-destructuring syntax 

**React and React Native Pg 100 of 606
* React Hooks / LifeCycle
. useEffect()
. React.UseContext()

.  React.useEffect(() => {
    fetchUser().then((user) => {
     setId(user.id);
      setName(user.name);
      });
    });

. useEffect() hook is called after the component finishes rendering

. const [resolved, setResolved] = useState(false);
  useEffect(() => {
  // ...the effect code...
  return () => {
    // ...the cleanup code that depends on "resolved"
  }
  }, [resolved]);

. console.count('label');

* Consume context data using hooks

**React and React Native Pg 116 of 606
. Reducer function
. React.useReducer();


.  const [{ name, age }, dispatch] =
    React.useReducer(reducer, {
    name: "",
    age: "",
   });


**Handling state dependencies
. 

**React and React Native Pg 151 of 606

** Event handling in React
. Multiple event Handlers

. Generic event Handlers

. import reverse from "./reverse";
  onReverseClick = reverse.bind(this); -> binds class context to generic event handler using bind(this)

. Higher order event handlers

. Inline event handlers

. Binding handlers to elements

. Synthetic event objects

. e.currentTarget

* Crafting re-usable components
. const id = (function* () {
  let i = 1;
  while (true) {
  yield i;
  i += 1;
  }
  })();

. id.next()

. components which rely only on the property values can be converted to functional components

. Render props

**React and React Native Pg 162 of 606
. Component trees

*React component life cycle
. render() is a lifecycle method in React

. getDerivedStateFromProps()
. render()
. componentDidMount()
. shouldComponentUpdate()
. getSnapshotBeforeUpdate()
. componentDidUpdate()
. componentWillUnmount()
. componentDidCatch()
. shouldComponentRender()

**React and React Native Pg 190 of 606
. new Promise((resolve, reject) => {

. React.createRef();
. ReactDOM.flushSync(() => {});

*Rendering imperative components

*Cleaning up after components
. cleaning up asynchronous calls
.  import { Promise } from "bluebird";
.  Promise.config({ cancellation: true });
.  e.preventDefault();
.  users().cancel();

*Containing errors with error boundaries
. 

**React and React Native Pg 202 of 606

*Validating Component Properties
. predictable outcomes
. in built property validators
. custom validators
. fail-fast architecture

. using property validation in re-usable components
. prop-types validation package for simple property validation
. import PropTypes from "prop-types";

* Basic Type Validation
. () => "My Return Value";

.  MyComponent.propTypes = {
   myString: PropTypes.string,
   myNumber: PropTypes.number,
   myBool: PropTypes.bool,
   myFunc: PropTypes.func,
   myArray: PropTypes.array,
   myObject: PropTypes.object,
   };

. MyComponent.propTypes = {
  myString: PropTypes.string.isRequired,
  myNumber: PropTypes.number.isRequired,
  myBool: PropTypes.bool.isRequired,
  myFunc: PropTypes.func.isRequired,
  myArray: PropTypes.array.isRequired,
  myObject: PropTypes.object.isRequired,
  };
  
. MyComponent.propTypes = {
  label: PropTypes.any,
  value: PropTypes.any,
  max: PropTypes.any,
  };

. MyComponent.propTypes = {
  myHeader: PropTypes.element.isRequired,
  myContent: PropTypes.node.isRequired,
  };

. <ul>
  {myUsers.map((user) => (
  <li key={user.id}>{user.name}</li>
  ))}
  </ul>

. MyComponent.propTypes = {
  myDate: PropTypes.instanceOf(Date),
  myCount: PropTypes.oneOfType([PropTypes.string,
    PropTypes.number]),
  myUsers: PropTypes.arrayOf(PropTypes.instanceOf(MyUser)),
  };

**React and React Native Pg 222 of 606
. const levels = new Array(10).fill(null).map((v, i) => i + 1);

. MyComponent.propTypes = {
  level: PropTypes.oneOf(levels),
  user: PropTypes.shape(userShape),
  };

* Custom property validators
. MyComponent.propTypes = {
  myArray: (props, name, component) =>
  Array.isArray(props[name]) && props[name].length
  ? null
  : new Error('${component}.${name}: expecting non-
  empty array'),
  myNumber: (props, name, component) =>
  Number.isFinite(props[name]) &&
  props[name] > 0 &&
  props[name] < 100
  ? null
  : new Error( '${component}.${name}: expecting number between 1 and 99'),
  };

*React Routing
. react-router package
. import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
. import { Route, Outlet } from "react-router-dom";

. import { useParams } from "react-router-dom";
. <Route path="/users/:id" element={<UserContainer/>} />
. const params = useParams();

. Optional Parameters

. <Router>
   <Routes>
    <Route>
     <Route/> <!-- child routes --!>
    </Route>
   </Routes>
  </Router>

**React and React Native Pg 229 of 606

*Using link components
. using basic links

. import {
  BrowserRouter as Router,
  Route,
  Routes,
  Link,
  Outlet
  } from "react-router-dom";

. <Link to="first">First</Link>

*Links with URL and query parameters
. import { useParams, useSearchParams } from "react-router-dom";

* Code splitting using lazy components
. lazy() api and Suspense component
. create-react-app tool to create React applications
.  React.useEffect(() => {
    import("./MyComponent").then((module) => {
      setMyComponent(() => module.default);
    });
  }, []);
*** 
const MyFeature = React.lazy(() => import("./MyFeature"));
 
function MyPage() {
  return (
    <>
      <h1>My Page</h1>
      <MyFeature />
    </>
  );
 }

import MyPage from "./MyPage";
 
function App() {
  return (
    <React.Suspense fallback={"loading..."}>
      <MyPage />
    </React.Suspense>
  );
 }
***

. Promise.all()
. import { FadeLoader } from "react-spinners"; -> react spinners package

*Lazy Pages and Routes


**React and React Native Pg 243 of 606
*Server side react components
. Isomorphic Javascript -> JS that can run in browser and node.js without modification
******** server side rendering chapter has been skipped***********

**React and React Native Pg 273 of 606
**User Interface Framework Components[Material UI]
. import Typography from "@mui/material/Typography";
. import Container from "@mui/material/Container";

. <Fragment>
   <Container>
     <Typography>

*Responsive Layouts
. Grid Component
. <Grid container ... >
    <Grid item .....>
      <Paper .....>

*Navigation Components
. 

*Input Components
. function toggleColor(setter, value) {
  setter(value === "default" ? "primary" : "default");
  }

*Custom Theme
. styled() function for components return new components
. createTheme() ThemeProvider Component for entire App

**React and React Native Pg 287 of 606 completed yaay!
----------------------------------------------------------------------------------------------------------
**Learning React 2nd Edition Page 31 of 310
. React dev tools, chrome extensions
. yarn is an alternative to npm

*Javascript for React
. kangax compatibility table
. let keyword is used to lmit the scope of Javascript variable
. template strings, template literals, string templates
. `${value1} some text ${value2}, ${value3} `
. function expression
  const foo = function () { 
  //JS code;
  }
  foo();
. function declaration
  function foo(){
  //JS code;
  }

. Arrow functions do not need function keyword and return keyword
  const lordify = value1 => `${value1} of sometext`;
. const lordify = (firstName, land) => `${firstName} of ${land}`;
.  use round brackets after => when returning objects
   const person = (firstName, lastName) => ({
   first: firstName,
   last: lastName
   }); 

. babel => javascript compiler to convert latest javascript features to javascript compatible with all browsers 

. Destructuring objects
. const obj1 = 
  {
   key1 : value1,
   key2 : value2,
   key3 : value3
  }
  const {key1,key2} = obj1;
  let  {key1, key2} = obj1;

**Learning React 2nd Edition Page 41 of 310

*Destructuring Arrays
.  const [firstAnimal] = ["Horse", "Mouse", "Cat"];
   console.log(firstAnimal); // Horse

.  Spread operator with objects
   const morning = {
   breakfast: "oatmeal",
   lunch: "peanut butter and jelly"
   };
 
   const dinner = "mac and cheese";

   const backpackingMeals = {
   ...morning,
   dinner
   };

*Asynchronous Javascript
. Promise with fetch() function

*Javascript classes
. prototypical inheritance
. Function or Classnames are start with capital letters in JS/React.
.
.
.

**Learning React 2nd Edition Page 61 of 310
* Javascript Modules
. usually there is one file per module
. module can export multiple types
. export default is used in place of export when only one type is exported from a module.

**CommonJS way of writing modules
. const print(message) => log(message, new Date())
  const log(message, timestamp) =>
  console.log(`${timestamp.toString()}: ${message}`}
  module.exports = {print, log}

*Functional programming with Javascript
. higher-order function
. Array.map Array.reduce
. Array.filter() function is immutable and returns new array.
. Array.map() returns an array after performing operation on each element of the source array.
. Object.keys <- returns all keys of an js object
. Array.reduce(), Array.reduceRight()
. 
. Currying functional technique
**Learning React 2nd Edition Page 70 of 310
. recursion
. composition


**Learning React 2nd Edition Page 85 of 310
. props.children
. React.createElement("h1", { id: "recipe-0" }, "Baked Salmon");
  React.createElement("element-type", { properties }, <children>);
. 

*React with JSX
. In JSX the type of element is described by tag
. The attributes of the element are React Properties
. Any children are added in between the opening and closing tags

**Learning React 2nd Edition Page 110 of 310
. className used instead of class since class is reserved word in javascript
**React Fragments
. <React.Fragment> </React.Fragment>
. <> </>

.   import React from "react";
    
    //Here amount, measurement, name are the properties(props) of the Ingredient component

    export default function Ingredient({ amount, measurement, name }) {
    return (
    <li>
    {amount} {measurement} {name}
    </li>
    );
    }

*Create React App tooling

**Learning React 2nd Edition Page 117 of 310 completed
*React state management
. npm i react-icons
. import { FaStar } from "react-icons/fa";
. <Fastar color="red"></Fastar>
. useState hook
. Hooks contain re-usable code which is seperate from the component logic.
. useState returns an array we can use the array destructuring to map first value to variable
. const [selectedStars] = useState(3);

**Learning React 2nd Edition Page 128 of 310 completed
. Passing state data from root component to child component via properties.
.
.

* Sending interactions back up the component tree
. using functions which are passed up the child components to root components with properties.
. React Forms using ref/ useRef();

**Learning React 2nd Edition Page 135 of 310 completed
. Uncontrolled component -> where dom values are directly accessed via useRef and ref.
. Controlled component -> dom values are updated indirectly with const [varname,setfn()] = useState().
. Custom hooks
. React Context - context provider, context consumer
. createContext();

**Learning React 2nd Edition Page 140 of 310 completed
. export const ColorContext = createContext();
. ColorContext.Provider, ColorContext.Consumer
. const {colors} = useContext(ColorContext);

*Creating custom context provider
*Creating custom hooks 

**Learning React 2nd Edition Page 150 of 310 completed
. useEffect, useLayoutEffect, useReducer, useCallback, useMemo
. used to change the component after the component has been completely rendered
. things we want the component to do other than render UI are called effects.
. dependency array in useEffect()
. useEffect(() => {
  console.log(`saved phrase: "${phrase}"`);
  }, [phrase]);
**Deep checking dependencies

**Angular-Questions QNo. 9/283
. 

**Learning React 2nd Edition Page 170 of 310 completed
. useMemo() and useCallback() are used to memoize the values based on input.
. useMemo() and useCallback() can be used to avoid re-render when using useEffect() dependency array.
. Browser paint : moment when the component elements are actually added to the DOM
. memo()
. shouldComponentUpdate()
*Incorporating Data
.
**Learning React 2nd Edition Page 183 of 310 completed.
. render props
. fetch command
. pending, success,failure promise
. windowing using react-window package
. Memo-izing values

**Learning React 2nd Edition Page 199 of 310 completed.
. Parallel requests
. Cancelling Requests
. useCallBack()
. GraphQL API
. npm i graphql-request
. useReducer() hook

**Learning React 2nd Edition Page 213 of 310 completed.
. Suspense
. <Callout/> tag
**Error Boundaries
. Are components which can prevent errors from crashing entire app
.  import React, { Component } from "react";
   export default class ErrorBoundary extends Component {
    state = { error: null };
    static getDerivedStateFromError(error) {
    return { error };
    }

    render() {
    const { error } = this.state;
    const { children, fallback } = this.props;
    if (error) return <fallback error={error} />;
    return children;
    }
   }
.  function ErrorScreen({ error }) {
 //
 // Here you can handle or track the error before rendering the message
 //
   return (
   <div className="error">
   <h3>We are sorry... something went wrong</h3>
   <p>We cannot process your request at this moment.</p>
   <p>ERROR: {error.message}</p>
   </div>
   );
  }
  <ErrorBoundary fallback={ErrorScreen}>
  <App />
  </ErrorBoundary>;

**Learning React 2nd Edition Page 230 of 310 completed.
** Code Splitting
. Lazy loading :  const Main = React.lazy(() => import("./Main"));
. 
** Suspense Component
.  <Suspense fallback={<ClimbingBoxLoader />}>
   <Main />
   </Suspense>
. npm i react-spinners
** Building Suspenseful Data Sources
. error handling with suspense pattern
.  <Suspense fallback={}>
    <ErrorBoundary>
      <AnyReactComponent/>
    </ErrorBoundary>
   </Suspense>
** Fiber: Reconciliation Algorithm
**Learning React 2nd Edition Page 237 of 310 completed.
. React Testing
. The process of analyzing Javascript code is called hinting or linting
. Prettier : opinionated code formatter


