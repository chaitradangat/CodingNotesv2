*Search for remote work in technical coding roles with higher pay.

*Do not deviate from these key topics in 2024.
  UI : Angular,React,TypeScript,CSS
  DotNet Core
  Version Control : Git
  CI CD : Azure DevOps
  Cloud : Azure
  Automated Testing : NUnit, Playwright

*Find good study sources, video+pdf for the above topics.

*Complete the certifications for Azure cloud by December 2024.



git config --global --add safe.directory

https://huggingface.co/

https://blog.quastor.org/

Green Blue Deployment method

Sample portfolio : https://rv2442.github.io/www.rahulvijan.tech/

*Load Balancing Algorithms
1.Static, Dynamic
2.Round Robin, Weighted Round Robin
3.Least Connections, Least Response Time
4.The Power of 2 Random Choices, Consistent Hashing, Maglev Hashing : pending

*Free AI Courses
https://www.classcentral.com/subject/ai

*https://www.elementsofai.com Chapter 1.1

*Open source identity management on linux
  . https://sssd.io/

*AI
  . Machine Learning
  . Data Science
  . Deep Learning

*Euler diagram : diagram representing group or classification of things

**https://www.elementsofai.com Chapter 1 Completed, waiting for peer review of last question

**https://www.elementsofai.com Chapter 2.1
  . The state space
  . Transitions
  . Path
  . Cost

AI in games
  . Minimax algorithm, Alpha-Beta Pruning

Game trees
  . Root Node
  . Child Nodes
  . Heuristic evaluation function

****https://www.elementsofai.com Chapter 2 completed

https://www.simplilearn.com/pgp-cyber-security-certification-training-course?source=preview_Cyber%20Security_tabular&eventname=Mega_Menu_New_Select_Category_table

****https://www.elementsofai.com Chapter 3 completed
  . Odds and Probabilities
  . Bayes Rule
  . Naive Bayes classification


****https://www.elementsofai.com Chapter 4.1 completed
Types of Machine Learning
  . Supervised Learning
  . Unsupervised Learning
  . Reinforcement Learning
  . Semi supervised Learning

Supervised Learning
  . Linear Regression / Just Regression
  . Training Data
  . Test Data
  . Overfitting

Unsupervised Learning
  . Typical unsupervised learning methods attempt to learn some kind of “structure” underlying the data.(clustering)
  . Generative modeling, Generative Adversarial Networks.

Supervised Learning
  . Nearest neighbor classifier
  . Euclidean distance
  . Defining what is "nearest"
  . nnc is used in AI to sstudy user beahvior
  . filter bubbles

Linear Regresssion
  . Starting point for calculation in linear regression is called the intercept
  . Biased data and data quality

****https://www.elementsofai.com Chapter 4 completed

AI Certifications-- none found all costly

***https://course.elementsofai.com Chapter 5.1 completed
Neural Networks
  . Neurons
  . Dendrites : incoming
  . Axons : outgoing one to many
  . Synapses : connect dendrite with axons

  . Neural networks can process vast amounts of data simultaneously, unlike the CPU which executes instructions serially.
  . Neural networks can store and process the data at same time.


***https://course.elementsofai.com Chapter 5.2 completed
Neural Networks
  . Have weights assigned to parameters or labels for calculation
  . Sum of the weights multiplied by number of inputs is called the linear combination of the inputs.
  . linear combination = intercept + (weight1 x input1) + (weight2 x input2) + (weight3 x input3) + (weight4 x input4)..

Neuron Activations and Outputs
  . The linear combination is passed through the activation function.
  . Types of activation functions : Identity function, Step function, Sigmoid function.

Artificial Neural Networks ANN
  . Perceptron
  . Perceptron algorithm, Backpropogation algorithm.
  . Neural network architecture is made up of layers, ex: Input Layer, Hidden Layer, Output Layer.
  . Input Layer -> Directly exposed to data or the input data.
  . Hidden Layer -> Whose neurons take input from neurons from output of neurons of the previous layer.
  . Output Layer -> Layer of neurons which output the result.

***https://course.elementsofai.com Chapter 5.3 completed
Advanced Neural Networks
  . Convolutional Neural Networks
  . CNNs can be added as a layer to existing neural network for increasing efficiency while processing image based inputs.
  . Generative Adversarial network - Combination of two networks - Generative network + Adversarial Network.
  . Attention mechanism -  Generative Pretrained Transformer(GPT).

***https://course.elementsofai.com Chapter 6
  . Algorithmic Bias
  . 

AZ 204 Azure Certification https://learn.microsoft.com/en-us/credentials/certifications/azure-developer/

Azure app service

*Autoscale
 . Scale-up, Scale-down - increase or decrease cpu,ram,etc.
 . Scale in - Scale out - increase or decrease number of instances.

*Deployment slots
 . Deployment slots are live apps with their own host names.

*App service plan tiers - Standard appservice plan, etc
 . An App Service plan defines a set of compute resources for a web app to run.

code> Cloud shell command  az webapp list-runtimes --os-type linux

*AZ-204: Implement Azure App Service web apps Unit 2 of 9 completed

https://medium.com/@aayyash/authentication-in-angular-why-it-is-so-hard-to-wrap-your-head-around-it-23ea38a366de

*Azure Cloud Shell

App service plan
  . Shared compute
  . Dedicated compute
  . Isolated

code> az webapp up

*Research more on* Multi-tenant application, Single Tenant Application

Find outbound IPs
code> 
az webapp show \
    --resource-group <group_name> \ 
    --name <app_name> \ 
    --query possibleOutboundIpAddresses \
    --output tsv

*Unit 7 of 9 remaining in  AZ-204: Implement Azure App Service web apps / Explore Azure App Service 

https://github.com/INNVTV/NetCore-Clean-Architecture

*Unit 8 of 8 (all) completed  AZ-204: Implement Azure App Service web apps / Configure web app settings 

https://learn.microsoft.com/en-us/credentials/certifications/exams/az-204/

Code to stream logs to azure cloud shell
Code> az webapp log tail --name appname --resource-group myResourceGroup

Intermediate certificates in the certificate chain.

Hardware specifications are defined in the app service plan, which can then be used to scale in or scale out

App Service Plan Tiers
Standard 
Premium 
Isolated

runaway autoscaling

Autoscale conditions and metrics

cpu percentage
memory percentage
disk queue length
http queue length
data in
data out

each metric has its own intrinsic time grain


Time grain vs Duration

what are webhooks

Unit 8 of 8 (all) completed AZ-204: Implement Azure App Service web apps / Scale apps in Azure App Service

Automatic routing for releasing test feature or beta feature to sample of production users
x-ms-routing-name=staging
x-ms-routing-name=self

Unit 8 of 8 (all) completed AZ-204: Implement Azure App Service web apps / Explore Azure App Service deployment slots 


**Docker Deep Dive 29 of 419 completed

*Docker Engine, Docker Runtime

*Docker daemon, Docker Client

*OCI Open Container Initiative specification
 . image-spec
 . runtime-spec

**Docker Deep Dive 57 of 419 completed

*Docker commands
 . dockercli -Version
 . docker image ls
 . docker container ls
 . docker system info
 . docker version
 . docker --version
 . docker-compose --version
 . docker-machine --version
 . notary version - investigate which command is this

* Best Practice - Do not install Docker under root user on Linux OS

*After installing docker two major components are installed
 . docker daemon / server / engine
 . docker client

**Docker Deep Dive 80 of 419 completed
. docker container run -it ubuntu:latest /bin/bash - spins up new docker container and runs bash
. docker container run -it microsoft/powershell:nanoserver pwsh.exe
. docker container exec -it vigilant_borg bash - attach to running container
. docker container exec -it pensive_hamilton pwsh.exe - attach to running container
. docker container stop vigilant_borg - stop container
. docker container rm vigilant_borg - delete or remove the docker container
. Ctrl + PQ - exit container interactive shell
. docker container ls -a - lists all containers even those which are stopped

*Containerizing an app
. docker build -t test:latest - run this command in the directory containing the app docker file
. docker container run -d \
  --name web1 \
  --publish 8080:8080 \
  test:latest - runs docker container from the image built with label test-latest

*Docker Engine
. Docker client
. Docker daemon
. containerd
. runc

*New Docker Architecture 
. client 
. daemon
. containerd
. shim - for daemonless containers when the daemon needs to be updated or maintained
. runc

*runc
. It is implementation of OCI container runtime spec

*containerd
. used to manage the container life cycle
. creates OCI compliant images from docker file / instructions passed by the daemon
. the OCI compliant images are passed onto the runc to spin up new containers

**Docker Deep Dive 111 of 419 completed

*Docker Images
. images are build-time constructs as opposed to containers which are run-time constructs
. image cannot be deleted until all containers running the image are removed
. docker images are made of loosely connected layers

*Containers do not contain their own kernel but use kernel shared by the Host OS

*Image registries
. Image registry can contain multiple image repositories which inturn can contain multiple images
. image registy example : hub.docker.com

*docker image command
. docker image ls--filter dangling=true
. docker image prune -a - removes unused images with no attached container instances

**Docker Deep Dive 113 of 419 completed

*Docker Image
. docker image inspect <imagename>
. docker history <imagename>

**Docker Deep Dive 116 of 419 completed

*Docker Container
. Container is runtime instance of an image
. Containers share the OS or kernel of the host they are running on

*Docker container commands
. docker container run <image> <commands>
. docker container run ubuntu /bin/bash
. container run-it microsoft/powershell:nanoserver pwsh.exe
. docker container run alpine:latest sleep 10

**Host can be anything laptop, server, vm in cloud - which can run a vm or container

**Linux commands
. usermod-aG docker <user> : add user to the docker user group
. systemlctl restart docker : restart docker

*Docker container commands
. docker container exec -it 3027eb644874 bash - reattach to container shell if the container is still running


**Docker Deep Dive 138 of 419 completed

*Docker Container Life Cycle

*Self healing containers with restart policy
. always
. unless-stopped
. on-failed
. docker container run --name cnt1 -it --restart always microsoft/powershell:nanosever


*Running docker container in background
. docker container run -d --name webserver -p 80:8080 nigelpoulton/pluralsight-docker-ci
. port mappings are expressed as host-port:container:port
. docker container rm $(docker container ls -aq) -f - forceremoves all containers which are running
 
**Docker Deep Dive 145 of 419 completed

*Jargon 
. muti stage builds
. Docker Compose, Docker Stacks

*Dockerizing Applications
. The directory containing the application is called the build context.
. Its common practice to keep the docker file in the root directory of build context.
. The name of `Dockerfile` is case-sensitive.
. Dockerfile contains the instructions for the docker host engine to build image from the image file Dockerfile.
. All docker files start with FROM keyword which forms the base layer for of the docker image


. docker image build -t web:latest . - builds docker image based on Dockerfile located at build context `.`
. docker login
. docker image tag web:latest nigelpoulton/web:latest  -> retag docker image with repo name before pushing
. docker image push nigelpoulton/web:latest

**Docker Deep Dive 158 of 419 completed

. # is used for adding comments in Dockerfile, all non-commented lines are INSTRUCTIONS in docker
. docker image history <imagename>

*Multistage builds
. COPY --from=storefront /usr/src/atsea/app/react-app/build/ .
. COPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .
. COPY --from command is used to only copy the application code from build images

*Docker best practices
. leverage the build cache
. cache-hit : when the instructions are same older image with same instruction is re-used as an layer
. cache-miss : new image is built
. ignore the cache by passing --no-cache=true flag during build
. --squash image which has multiple layers , however this disables sharing of the image as layers in other builds
. apt-get install no-install-recommends - installs only the required packages

*Docker commands
. -t flag tags the image, and the -f flag lets you specify the name and location of the Dockerfile.


**Docker Deep Dive 162 of 419 Chapter containerizing an app completed!

*Deploying apps with docker compose
. docker compose is an external tool sitting on top of the docker host to spin up multi container apps
. single engine mode
. swarm mode
. docker-compose --version

*Keys in the docker compose yaml file
. version : version of docker compose file format
. services : used to define various applications/services
. each service is deployed in separate container
. networks : networks key tells docker to create new network
. by default bridge networks are used by docker to connect containers on the same host
. volume : used by docker to create volumes / persistent storage

**Docker Deep Dive 182 of 419 completed
. docker network ls
. docker volume ls
. docker compose up &
. docker-compose down
. docker-compose ps -a -> lists all running or stoppoed containers
. docker-compose top - list processes running inside running containers
. docker-compose stop - stops running containers
. docker-compose restart
. docker volume inspect counterapp_counter-vol | grep Mount

**Docker Deep Dive 202 of 419 completed
**Docker Swarm
. swarm made of two components
. secure cluster
. orchestration engine
. swarm cluster -> etcd database, service/tasks that wrap the worker, manager nodes
. worker, manager nodes -> are docker hosts wrapped in service

. docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377
. docker swarm join-token worker
. docker swarm join-token manager
. docker swarm update --autolock=true prevents earlier restarted managers from direct access to swarm
. docker swarm unlock <key> to unlock swarm to add restarted node
. docker service create --name web-fe -p 8080:8080 --replicas 5 nigelpoulton/pluralsight-docker-ci
. docker service ls
. docker service scale web-fe=10


Itz Friday!!

**Docker Deep Dive 213 of 419 completed

. docker servcie rm <servicename>
. docker network create -d overlay uber-net
. overlay creates new layer 2 network on top of underlying network(s)
. docker network ls

*publishing port on nodes modes
. ingress mode
. host mode

. docker service update --image <imagename:new tag> --update-parallelism 2 --update-delay 20 uber-svc -> rolling update service two replicas at a time with delay of 20 sec
. docker service logs <servicename> --log-driver <driverchoice json-file, journald, etc> -> displays logs from all replicas of the service

**Docker Deep Dive 219 of 419 completed

**Docker Networks
. Container Network Model
. libnetwork -> docker's implementation of the CNM
. drivers

**Container Network Model
. sandbox -> ethernet interface, ports, routing table, DNS config
. endpoint -> virtual ethernet interface (veth) , connects sandbox to networks
. network -> software implementation of switch (802.1d bridge)

**libnetwork
. native service discovery
. ingress-based container load balancing
. network control plane
. management plane

*drivers
. data plane

*built in or local drivers
. bridge
. overlay
. macvlan

** Single-host bridge networks
. docker network ls
. docker network create-d bridge localnet
. docker port web

**Docker Deep Dive 230 of 419 completed

** Multi host overlay networks
. docker network create -d macvlan --subnet=10.0.0.0/24 --ip-range=10.0.0.0/25 --gateway=10.0.0.1 -o parent=eth0.100 macvlan100

. docker container logs <containername> -> standalone container logs
. docker service logs  <servicename> -> swarm container logs

*Service Discovery
. service discovery allows all swarm services and containers to find find each other by name given they are on the same network
. under the hood dns resolver in each container and the embedded dns server helps with service discovery
. docker container run -it --name c1 --dns=8.8.8.8 --dns-search=dockercerts.com alpine sh -> custom dns server

Tuesday!

**Docker Deep Dive 243 of 419 completed

*Ingress Load Balancing
. docker swarm supports two publishing modes
. ingress mode -> containers have access to each other even though the containers dont have same service
. host mode -> only containers with same service have access to each other
. docker network prune
. docker network rm

*The Kubernetes Book pg 18 of 308
. container runtime interface -> to make different container provider technologies pluggable
. containerd -> default kubernetes conatiner runtime
. Kubernetes is both of the following : cluster, orchestrator

*Kubernetes Cluster
. contains one or more nodes that provide cpu, memory, other resources.
. kubernetes cluster nodes are of two types :
. control plane nodes -> must always be linux
. worker nodes -> can be windows / linux

*The Kubernetes Book pg 22 of 308

. control plane nodes implement Kubernetes intelligence
. every cluster needs atleast one control plane node
. control plane node -> api server, scheduler, controllers
. worker nodes are for running applications

*Services inside the control plane

* API Server
. All requests to change and query the state of cluster go through API Server.
. All internal Kubernetes services communicate with each other via the API server.
. API Server is the front end of Kubernetes

* Deploying or updating an app using Kubernetes follows this process:
1. Describe the requirements in a YAML configuration file
2. Post the configuration file to the API server
3. The request will be authenticated and authorized
4. The updates will be persisted in the cluster store
5. The updates will be scheduled to the cluster

* Cluster Store
. Cluster store holds desired states of all applications and cluster components
. it is based on the etcd distributed database.
. all control plane nodes have a copy of the etcd database

*Kubernetes Controllers -> controller manager controls all controllers
. Deployment Controller
. Statefulset Controller
. ReplicaSet Controller
. controllers run as background watch loops re-conciling desired and actual states

*Kubernetes scheduler
. 

**React and React Native Pg 34 of 606
. React Component API
. React DOM API

*React Component
. lifecycle -> hooks
. data
. events
. jsx

*React Component -> Renderer -> Render Target
. component -> react dom -> browser
. component -> react native -> mobile device
. component -> react desktop -> desktop/laptop
.
.
.

**React and React Native Pg 38 of 606

*Rendering with JSX
. render() function takes jsx as argument
. 

**React and React Native Pg 43 of 606
. React needs root element in the jsx for rendering
. {this.props.children} is used to render the child component inside the custom component
. React class attributes and namespaces

**React and React Native Pg 64 of 606
. array.map((i) => { })
. Object.Keys(i).map((object) => {})
. JSX Fragments using empty <> </> or <div> </div> in fragment custom component elements
. JSX : Javascript XML

*Component Data
. properties
. state
. context

 state = {
    first: false,
    second: true,
  };
const { first, second } = this.state;

//changging the state of the component using setTimeout()

state = {
    heading: "React Awesomesauce (Busy)",
    content: "Loading...",
  };
const { heading, content } = this.state;

setTimeout(() => {
      this.setState({
        heading: "React Awesomesauce",
        content: "Done!",
      });
    }, 3000);

*Default / static state properties

static defaultProps = {
    disabled: false,
    text: "My Button",
  };

 const { disabled, text } = this.props;

. properties are immutable unlike state which keeps changing all the time


**React and React Native Pg 84 of 606
. component properties are declared inside the render function
. component properties can be assigned via attributes when using the component in jsx

* Stateless components
. Pure functional components

* Container components
. Stateful components are called container components
. Container components de-couple the data fetching from the component rendering using child components

function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(["First", "Second", "Third"]);
    }, 2000);
  });
}

. For data that is global to the application, you can use `context` to avoid lots of code being written to share data

* React context
. provider 
. consumer

 React.createContext("permissions");

* React Hooks / LifeCycle
. useState()


. export default function App() {
  const [name] = React.useState("Adam");
  const [age] = React.useState(35);
  return (
    <>
      <p>My name is {name}</p>
      <p>My age is {age}</p>
    </>
  );

 . array-destructuring syntax 

**React and React Native Pg 100 of 606
* React Hooks / LifeCycle
. useEffect()
. React.UseContext()

.  React.useEffect(() => {
    fetchUser().then((user) => {
     setId(user.id);
      setName(user.name);
      });
    });

. useEffect() hook is called after the component finishes rendering

. const [resolved, setResolved] = useState(false);
  useEffect(() => {
  // ...the effect code...
  return () => {
    // ...the cleanup code that depends on "resolved"
  }
  }, [resolved]);

. console.count('label');

* Consume context data using hooks

**React and React Native Pg 116 of 606
. Reducer function
. React.useReducer();


.  const [{ name, age }, dispatch] =
    React.useReducer(reducer, {
    name: "",
    age: "",
   });


**Handling state dependencies
. 

**React and React Native Pg 151 of 606

** Event handling in React
. Multiple event Handlers

. Generic event Handlers

. import reverse from "./reverse";
  onReverseClick = reverse.bind(this); -> binds class context to generic event handler using bind(this)

. Higher order event handlers

. Inline event handlers

. Binding handlers to elements

. Synthetic event objects

. e.currentTarget

* Crafting re-usable components
. const id = (function* () {
  let i = 1;
  while (true) {
  yield i;
  i += 1;
  }
  })();

. id.next()

. components which rely only on the property values can be converted to functional components

. Render props

**React and React Native Pg 162 of 606
. Component trees

*React component life cycle
. render() is a lifecycle method in React

. getDerivedStateFromProps()
. render()
. componentDidMount()
. shouldComponentUpdate()
. getSnapshotBeforeUpdate()
. componentDidUpdate()
. componentWillUnmount()
. componentDidCatch()
. shouldComponentRender()

**React and React Native Pg 190 of 606
. new Promise((resolve, reject) => {

. React.createRef();
. ReactDOM.flushSync(() => {});

*Rendering imperative components

*Cleaning up after components
. cleaning up asynchronous calls
.  import { Promise } from "bluebird";
.  Promise.config({ cancellation: true });
.  e.preventDefault();
.  users().cancel();

*Containing errors with error boundaries
. 

**React and React Native Pg 202 of 606

*Validating Component Properties
. predictable outcomes
. in built property validators
. custom validators
. fail-fast architecture

. using property validation in re-usable components
. prop-types validation package for simple property validation
. import PropTypes from "prop-types";

* Basic Type Validation
. () => "My Return Value";

.  MyComponent.propTypes = {
   myString: PropTypes.string,
   myNumber: PropTypes.number,
   myBool: PropTypes.bool,
   myFunc: PropTypes.func,
   myArray: PropTypes.array,
   myObject: PropTypes.object,
   };

. MyComponent.propTypes = {
  myString: PropTypes.string.isRequired,
  myNumber: PropTypes.number.isRequired,
  myBool: PropTypes.bool.isRequired,
  myFunc: PropTypes.func.isRequired,
  myArray: PropTypes.array.isRequired,
  myObject: PropTypes.object.isRequired,
  };
  
. MyComponent.propTypes = {
  label: PropTypes.any,
  value: PropTypes.any,
  max: PropTypes.any,
  };

. MyComponent.propTypes = {
  myHeader: PropTypes.element.isRequired,
  myContent: PropTypes.node.isRequired,
  };

. <ul>
  {myUsers.map((user) => (
  <li key={user.id}>{user.name}</li>
  ))}
  </ul>

. MyComponent.propTypes = {
  myDate: PropTypes.instanceOf(Date),
  myCount: PropTypes.oneOfType([PropTypes.string,
    PropTypes.number]),
  myUsers: PropTypes.arrayOf(PropTypes.instanceOf(MyUser)),
  };

**React and React Native Pg 222 of 606
. const levels = new Array(10).fill(null).map((v, i) => i + 1);

. MyComponent.propTypes = {
  level: PropTypes.oneOf(levels),
  user: PropTypes.shape(userShape),
  };

* Custom property validators
. MyComponent.propTypes = {
  myArray: (props, name, component) =>
  Array.isArray(props[name]) && props[name].length
  ? null
  : new Error('${component}.${name}: expecting non-
  empty array'),
  myNumber: (props, name, component) =>
  Number.isFinite(props[name]) &&
  props[name] > 0 &&
  props[name] < 100
  ? null
  : new Error( '${component}.${name}: expecting number between 1 and 99'),
  };

*React Routing
. react-router package
. import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
. import { Route, Outlet } from "react-router-dom";

. import { useParams } from "react-router-dom";
. <Route path="/users/:id" element={<UserContainer/>} />
. const params = useParams();

. Optional Parameters

. <Router>
   <Routes>
    <Route>
     <Route/> <!-- child routes --!>
    </Route>
   </Routes>
  </Router>

**React and React Native Pg 229 of 606

*Using link components
. using basic links

. import {
  BrowserRouter as Router,
  Route,
  Routes,
  Link,
  Outlet
  } from "react-router-dom";

. <Link to="first">First</Link>

*Links with URL and query parameters
. import { useParams, useSearchParams } from "react-router-dom";

* Code splitting using lazy components
. lazy() api and Suspense component
. create-react-app tool to create React applications
.  React.useEffect(() => {
    import("./MyComponent").then((module) => {
      setMyComponent(() => module.default);
    });
  }, []);
*** 
const MyFeature = React.lazy(() => import("./MyFeature"));
 
function MyPage() {
  return (
    <>
      <h1>My Page</h1>
      <MyFeature />
    </>
  );
 }

import MyPage from "./MyPage";
 
function App() {
  return (
    <React.Suspense fallback={"loading..."}>
      <MyPage />
    </React.Suspense>
  );
 }
***

. Promise.all()
. import { FadeLoader } from "react-spinners"; -> react spinners package

*Lazy Pages and Routes


**React and React Native Pg 243 of 606
*Server side react components
. Isomorphic Javascript -> JS that can run in browser and node.js without modification
******** server side rendering chapter has been skipped***********

**React and React Native Pg 273 of 606
**User Interface Framework Components[Material UI]
. import Typography from "@mui/material/Typography";
. import Container from "@mui/material/Container";

. <Fragment>
   <Container>
     <Typography>

*Responsive Layouts
. Grid Component
. <Grid container ... >
    <Grid item .....>
      <Paper .....>

*Navigation Components
. 

*Input Components
. function toggleColor(setter, value) {
  setter(value === "default" ? "primary" : "default");
  }

*Custom Theme
. styled() function for components return new components
. createTheme() ThemeProvider Component for entire App

**React and React Native Pg 287 of 606 completed yaay!
----------------------------------------------------------------------------------------------------------
**Learning React 2nd Edition Page 31 of 310
. React dev tools, chrome extensions
. yarn is an alternative to npm

*Javascript for React
. kangax compatibility table
. let keyword is used to lmit the scope of Javascript variable
. template strings, template literals, string templates
. `${value1} some text ${value2}, ${value3} `
. function expression
  const foo = function () { 
  //JS code;
  }
  foo();
. function declaration
  function foo(){
  //JS code;
  }

. Arrow functions do not need function keyword and return keyword
  const lordify = value1 => `${value1} of sometext`;
. const lordify = (firstName, land) => `${firstName} of ${land}`;
.  use round brackets after => when returning objects
   const person = (firstName, lastName) => ({
   first: firstName,
   last: lastName
   }); 

. babel => javascript compiler to convert latest javascript features to javascript compatible with all browsers 

. Destructuring objects
. const obj1 = 
  {
   key1 : value1,
   key2 : value2,
   key3 : value3
  }
  const {key1,key2} = obj1;
  let  {key1, key2} = obj1;

**Learning React 2nd Edition Page 41 of 310

*Destructuring Arrays
.  const [firstAnimal] = ["Horse", "Mouse", "Cat"];
   console.log(firstAnimal); // Horse

.  Spread operator with objects
   const morning = {
   breakfast: "oatmeal",
   lunch: "peanut butter and jelly"
   };
 
   const dinner = "mac and cheese";

   const backpackingMeals = {
   ...morning,
   dinner
   };

*Asynchronous Javascript
. Promise with fetch() function

*Javascript classes
. prototypical inheritance
. Function or Classnames are start with capital letters in JS/React.
.
.
.

**Learning React 2nd Edition Page 61 of 310
* Javascript Modules
. usually there is one file per module
. module can export multiple types
. export default is used in place of export when only one type is exported from a module.

**CommonJS way of writing modules
. const print(message) => log(message, new Date())
  const log(message, timestamp) =>
  console.log(`${timestamp.toString()}: ${message}`}
  module.exports = {print, log}

*Functional programming with Javascript
. higher-order function
. Array.map Array.reduce
. Array.filter() function is immutable and returns new array.
. Array.map() returns an array after performing operation on each element of the source array.
. Object.keys <- returns all keys of an js object
. Array.reduce(), Array.reduceRight()
. 
. Currying functional technique
**Learning React 2nd Edition Page 70 of 310
. recursion
. composition


**Learning React 2nd Edition Page 85 of 310
. props.children
. React.createElement("h1", { id: "recipe-0" }, "Baked Salmon");
  React.createElement("element-type", { properties }, <children>);
. 

*React with JSX
. In JSX the type of element is described by tag
. The attributes of the element are React Properties
. Any children are added in between the opening and closing tags

**Learning React 2nd Edition Page 110 of 310
. className used instead of class since class is reserved word in javascript
**React Fragments
. <React.Fragment> </React.Fragment>
. <> </>

.   import React from "react";
    
    //Here amount, measurement, name are the properties(props) of the Ingredient component

    export default function Ingredient({ amount, measurement, name }) {
    return (
    <li>
    {amount} {measurement} {name}
    </li>
    );
    }

*Create React App tooling

**Learning React 2nd Edition Page 117 of 310 completed
*React state management
. npm i react-icons
. import { FaStar } from "react-icons/fa";
. <Fastar color="red"></Fastar>
. useState hook
. Hooks contain re-usable code which is seperate from the component logic.
. useState returns an array we can use the array destructuring to map first value to variable
. const [selectedStars] = useState(3);

**Learning React 2nd Edition Page 128 of 310 completed
. Passing state data from root component to child component via properties.
.
.

* Sending interactions back up the component tree
. using functions which are passed up the child components to root components with properties.
. React Forms using ref/ useRef();

**Learning React 2nd Edition Page 135 of 310 completed
. Uncontrolled component -> where dom values are directly accessed via useRef and ref.
. Controlled component -> dom values are updated indirectly with const [varname,setfn()] = useState().
. Custom hooks
. React Context - context provider, context consumer
. createContext();

**Learning React 2nd Edition Page 140 of 310 completed
. export const ColorContext = createContext();
. ColorContext.Provider, ColorContext.Consumer
. const {colors} = useContext(ColorContext);

*Creating custom context provider
*Creating custom hooks 

**Learning React 2nd Edition Page 150 of 310 completed
. useEffect, useLayoutEffect, useReducer, useCallback, useMemo
. used to change the component after the component has been completely rendered
. things we want the component to do other than render UI are called effects.
. dependency array in useEffect()
. useEffect(() => {
  console.log(`saved phrase: "${phrase}"`);
  }, [phrase]);
**Deep checking dependencies

**Angular-Questions QNo. 9/283
. 

**Learning React 2nd Edition Page 170 of 310 completed
. useMemo() and useCallback() are used to memoize the values based on input.
. useMemo() and useCallback() can be used to avoid re-render when using useEffect() dependency array.
. Browser paint : moment when the component elements are actually added to the DOM
. memo()
. shouldComponentUpdate()
*Incorporating Data
.
**Learning React 2nd Edition Page 183 of 310 completed.
. render props
. fetch command
. pending, success,failure promise
. windowing using react-window package
. Memo-izing values

**Learning React 2nd Edition Page 199 of 310 completed.
. Parallel requests
. Cancelling Requests
. useCallBack()
. GraphQL API
. npm i graphql-request
. useReducer() hook

**Learning React 2nd Edition Page 213 of 310 completed.
. Suspense
. <Callout/> tag
**Error Boundaries
. Are components which can prevent errors from crashing entire app
.  import React, { Component } from "react";
   export default class ErrorBoundary extends Component {
    state = { error: null };
    static getDerivedStateFromError(error) {
    return { error };
    }

    render() {
    const { error } = this.state;
    const { children, fallback } = this.props;
    if (error) return <fallback error={error} />;
    return children;
    }
   }
.  function ErrorScreen({ error }) {
 //
 // Here you can handle or track the error before rendering the message
 //
   return (
   <div className="error">
   <h3>We are sorry... something went wrong</h3>
   <p>We cannot process your request at this moment.</p>
   <p>ERROR: {error.message}</p>
   </div>
   );
  }
  <ErrorBoundary fallback={ErrorScreen}>
  <App />
  </ErrorBoundary>;

**Learning React 2nd Edition Page 230 of 310 completed.
** Code Splitting
. Lazy loading :  const Main = React.lazy(() => import("./Main"));
. 
** Suspense Component
.  <Suspense fallback={<ClimbingBoxLoader />}>
   <Main />
   </Suspense>
. npm i react-spinners
** Building Suspenseful Data Sources
. error handling with suspense pattern
.  <Suspense fallback={}>
    <ErrorBoundary>
      <AnyReactComponent/>
    </ErrorBoundary>
   </Suspense>
** Fiber: Reconciliation Algorithm
**Learning React 2nd Edition Page 237 of 310 completed.
. React Testing
. The process of analyzing Javascript code is called hinting or linting
. Prettier : opinionated code formatter

**Azure App Service Plan
. pricing tiers
. deployment slots
. deployment slot swapping
. github actions
. scale up scale down
. webjobs

**Azure Container Instances (ACI)

. key value dataw
. graph databases


***Important -> Complete all exercises from az-204 modules

**https://learn.microsoft.com/en-us/credentials/certifications/azure-developer/?practice-assessment-type=certification
Implement Caching for Solutions
* Types of Redis available on azure
. Redis OSS
. Redis Enterprise

* Caching application patterns
. Data cache / cache-aside
. Content cache
. Session store
. Task queueing
. Distributed Transactions

*Tiers
. Basic, Standard, Premium, Enterprise, Enterprise Flash.

*
. Redis cache name shud be unique.
. The cache shud be located near the application region.

* Hostname, port, access key.

**Activity log in redis cache for Azure lists all operations performed on the redis cache database.

**Azure Content Delivery Network
. Ideal for static content, can also be used with dynamic content.
. Edge servers, point of presence locations.
. Default TTL is 7 days.
. Ideal for new product launch with heavy traffic to server / endpoint.

*CDN Caching
. Rule-based
. Query string based caching
. Cache-Control header with TTL value

*CDN cache purging
. az cdn endpoint purge \
    --content-paths '/css/*' '/js/app.js' \
    --name ContosoEndpoint \
    --profile-name DemoProfile \
    --resource-group ExampleGroup

*Geofiltering - disallow content is specific regions or geography

* CdnManagementClient 

**Troubleshoot solutions by using Application Insights
. Application Insights is an extension of Azure Monitor
. Application Performance Monitoring (APM) features

. Live Metrics, Availibility, Usage, Smart detection, Application Map, Distributed Tracing.
. Type of Data : Metrics, Telemetry, Logs
. Kusto queries
. Preaggregated metrics - standard metrics
. Detailed Metrics - Log based metrics
*Availibility Tests 
. OpenTelemetry
. 100 availibility tests per application insights resource
. Standard Test, Custom Trackavailibility() test, URL ping test, 

*Application Map
. Components, external dependencies.
. Mapped via http calls made by resources with application insights enabled.
. Cloud role name to distinguish or name the components in application map.


**Develop message-based solutions
*Azure Message Queues : Queues are usually used to create backlog of work to process asynchronously.
. Azure Service Bus, Azure Storage Queue
. Azure Messaging Infrastructure, Azure Storage Infrastructure

*Azure Service Bus
. Enterprise messaging solution
. Message queues, publisher subscriber, topics
. Messaging scenarios : Messaging, decouple applications, topics and subscription, Message sessions.
. Basic, Standard, Premium tiers
. Namespace-> Topic -> Queue
. Dead letter queue, deferral queue
. Duplicate detection
. Uses AMQP, HTTP Rest protocol
. Azure service bus entities : queue, topics, subscriptions, (rules & actions)
. Receive delete, peek lock
. Message = Payload + metadata

*Azure Storage Queue
. Storage Account, Queue, Messages
. Default Message TTL is seven days
. The read/ dequeued message must be deleted by consumer by sending delete command/request after reading the message

**Develop event-based solutions
. Azure Event Grid, Azure Event Hub

*Azure Event Grid
. No guarantee of sequence of events published by event grid, they can be out of order
. Uses HTTP, MQTT (message queueing telemetry transport) protocol
. Publisher(Application / event source) , Partners(Publish / Consume events), Events, Event Source, Topics, Subscription, Event Handlers
. Max event size 1 MB increments of 64KB
. Managed Identity, Event Hubs Data Sender Role, RBAC
. Event Grid event schema, Cloud Event Schema
  . Subject : path to resource where the event occured 
. Dead letter queue
. Retry policy based on : delivery attempts, event TTL
. Output batching to improve efficiency
. Delayed delivery
. WebHooks
. Filter events by : event type, subject, advanced fields or operators.
. Exercise: Create topic, event subscriber, send event, read event using powershell

*Azure Event Hubs
. BigData streaming, event ingestion service.
. Supports AMQP, Apache Kafka, HTTP protocols.
. Apache Kafka, Azure Schema Registry, Stream Analytics.
*Azure Event Hubs key components
. Producer application : application producing events which are ingested by the hub.
. Namespace(can contain more than one hub)
. Event Hub / Kafka Topic: can contain one or more partition
. Partitions : used for scaling, parallel streaming of events
. Consumer applications : Kafka consumer clients / Azure Event Hubs SDK clients reading by maintaining an offset.
. Consumer group : logical grouping of comsumers having independent offsets.
*Event Hubs Capture
. Capture data in Apache Avro forma
*Throughput Units
* Control Access
. Microsoft Entra ID, Shared Access Signature, Managed Identity,

**AZ-204: Implement API Management
. Jargon: API Gateway, backend API, Subscriptions, Product(group of related APIS), 
. Components: API Gateway, Management Plane(Admin Interface), Developer Portal
. Open product, Protected product(needs subscription to acceess APIs in the product)
. Groups : Administrators, Developers, Guests.
. Policies : executed on the request or response of the API, in form of text or expressions
. Policy scope : Global, Product-specific, API-specific, API operation-specific
*API Gateway(Data Plane)
. Managed, Self hosted Gateway
*Azure API Management Policies 
. Policies are a collection of statements / configuration
*Policy Definition or Configuration
. inbound, backend, outbound, on-error
    <policies>
     <inbound/>
     <outbound/>
     <backend/>
     <on-error/>
    </policies>
. Policy Expressions : C# code, context object
. Policy scopes, local and api level
. Advanced Policies : Control flow, forward request, limit concurrency, log to event hub, mock response, retry, return response
*Secure API with subscription
. Subscription based on keys, ip whitelisting, certificates,OAuth 2.0
. Subscription scope : all api, product, single api
. Verify certificate based on : Issuer, Subject, Thumbprint, Expiry date
*Resource created is called Azure API Management in Azure.

**Implement secure Azure solutions
. Azure Key-vault, Managed Identity, Azure App Configuration.

*Implement Azure key vault
. Jargon : Keys(Encryption keys), Secret, Certificates , Vaults, HSM(Hardware Security Module)
. Store and access secret.
. Containers : Vault, HSM
. Secrets Management, Key Management, Certificate Management
. Tiers : Standard, Premium
. Access : Microsoft Entra ID, RBAC, Azure Key Vault access policy, managed identity,.
. Soft delete, purge protection.
*Implement Managed Identities :  Removes the need to manually manage credentials.
. Jargon: Azure Resource Manager, Microsoft Entra Tenant, Microsoft Entra ID, Azure Instance Metadata Service, Managed Identity Operator, Azure.Identity
. User-assigned managed identity, system-assigned managed identity.
. Request a JWT token by passing client ID and certificate, DefaultAzureCredential
*DefaultCredentials are read from
. environment, managed identity of the underlying resource, Visual Studio login, azure cli or powershell login, Interactive Login
*ChainedTokenCredential: has fallback mechanism if primary call fails eg: var credential = new ChainedTokenCredential(new ManagedIdentityCredential(), new AzureCliCredential());

*Implement Azure App Configuration : https://learn.microsoft.com/en-us/credentials/certifications/azure-developer/?practice-assessment-type=certification
. Jargon : Encryption of information at rest, Encryption of information in transit.
. Used to store less sensitive data unlike key-vault used to store secrets.
. Centrally manage app configuration and  application features(feature flags).
. Application Keys Hierarchy Representation
  AppName:Service1:ApiEndpoint
  AppName:Service2:ApiEndpoint
. Key labels used for the same key across different environments or versions of the application.
*Azure Application Feature Management using appsettings.json example 
"FeatureManagement": {
    "FeatureA": true, // Feature flag set to on
    "FeatureB": false, // Feature flag set to off
    "FeatureC": {
        "EnabledFor": [
            {
                "Name": "Percentage",
                "Parameters": {
                    "Value": 50
                }
            }
        ]
    }
}
*Secure App configuration using
. Customer-managed keys(not sure what this is), private endpoints, managed identities.
*Private endpoint
. The app configuration is access over internal(private) virtual network not available to the internet.
. On-premise applications can access the endpoint only over a VPN, express route etc.
*Managed Identities
. System assigned managed identity, User assigned managed identity
. az appconfig identity create --name <name> --resource-group <rgname>
. az appconfig identity assign --name <name> --resource-group <rgname> --identities <path to user defined managed identities>

**Implement containerized solutions
. Azure Container Registry, Azure Container Instances, Azure Container Apps.
* Azure Container Registry
. Jargon : ACR Tasks, Geo replication(multiple copies at different countries in same region), ACR Task Context, Helm Chart
. Store container images, automate builds and deployment.
. Azure Container Registry(ACR) is a private docker registry.
. ACR Tiers : Basic, Standard, Premium
. ACR Tasks : Quick task, Auto triggered tasks, Multi step tasks
. az acr build
. az acr task create
. az acr run
* Run container images in Azure Container Instances
. Container engine as a service.
. Container group : collection of containers which get scheduled on the same host.
. Deployment : arm templates, yaml file.
. az container create
. containerized tasks
. Container restart policy: Always, Never, OnFailure
. Set Environment Variables : --env, secureValue parameter in yaml file
. volumes
* Implement Azure Container Apps
. Jargon: Authentication Flow, server flow, client flow, revision-scope changes, Dapr (distributed application runtime)
. Deploy applications on serverless platform that runs on top of Azure Kubernetes Service.
. Serverless container service.
. Scale based on KEDA supported scale trigger
. Dapr Integration
. az containerapp env create \
    --name $myAppContEnv \
    --resource-group $myRG \
    --location $myLocation
. az containerapp create \
    --name my-container-app \
    --resource-group $myRG \
    --environment $myAppContEnv \
    --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
    --target-port 80 \
    --ingress 'external' \
    --query properties.configuration.ingress.fqdn
. Configuration: arm template configuration, changes to it forces revision of container.
. az containerapp update
. az containerapp revision list
. Secrets are at application scope and not at revision scope
. Dapr integration with container apps
. Dapr components : the container names in the scopes array define which component is loaded.

**Develop solutions that use Azure Cosmos DB
*Explore Azure Cosmos DB
. Jargon : Request Units,
. Globally distributed database system, supports multiple regions at once.
. Hierarchy : Azure CosmosDB account -> Azure CosmosDB Database -> Azure CosmosDB container -> collection, table, graph.
. Data is stored in one or more servers called partitions.
. Physical partition 50 GB, Logical partition 20 GB.
. Consistency levels : 
  . Strong : highest consistency always latest data
  . Bounded staleness : configurable lag between regions
  . Session : single session write read consistency
  . Consistent prefix : consistency maintained at transaction level
  . Eventual consistency : weakest form only to be used for non-critical data such as likes, reshares, comments
. Database APIs : NoSQL, MongoDB, Cassandra, PostgreSQL, Gremlin, Table
* Work with Azure Cosmos DB
. Client-side and Server-side programming with Azure Cosmos DB
. Azure CosmosDB Account -> Azure CosmosDB Database -> Container* -> Item*
. Container -> Collection, Graph, Table. Item -> Document, Edge, Row.
. az group create --location <myLocation> --name az204-cosmos-rg
. az cosmosdb create --name <myCosmosDBacct> --resource-group az204-cosmos-rg
. az account list-locations -o table
. az cosmosdb keys list --name <myCosmosDBacct> --resource-group az204-cosmos-rg
. az group delete --name az204-cosmos-rg --no-wait
. When defining a stored procedure in the Azure portal, input parameters are always sent as a string to the stored procedure. 
. Stored Procedures, Stored Procedures with parameters, Transactions.
. Triggers and User defined functions
. Pre-triggers, Post-triggers
. Change Feeds in Azure CosmosDB
. Change feed pull model and push model
. Delete operations are not saved in change feed, use  soft delete with TTL instead
. Azure function trigger for Azure Cosmos DB
. Monitored container, lease container, compute instance, delegate(code)

**Develop solutions that use Blob storage
* Explore Azure Blob storage
. Jargon : Storage Account, Container, Blob
. Blob storgae is used for saving large amount of unstructured data.
. Azure Storage Account -> Container -> Blob
. Tiers : Standard, Premium
. Premium : block blobs, page blobs, file shares.
. Access Tiers : Hot, Cool, Cold, Archive(Tier)
. https://<storage-account-name>.blob.core.windows.net/<container-name>
. Blobs : block blobs, append blobs, page blobs
. Block blobs : individually managed blobs
. Append blobs : Block blobs optimized for appnding data
. Page blobs : Random read and write eg. VHD format hard disk files
. All blob data is encrypted at rest by default.
. The encryption can be by microsoft managed keys, customer managed keys or customer provided keys.
. Client-side encryption : the data is encrypted on client side using the .NET client SDK before it is being uploaded and is decrypted while the blob is being downloaded while reading.
* Manage the Azure Blob storage lifecycle
. Jargon : Rehydrate blob / data, Blob snapshots
. Lifecycle Management: Rule based policy : set of rules defined in a json format
. Can be appied at storage account, container, individual blob level
. az storage account management-policy create
. Archive tier is offline tier.
. Rehydration Priority : x-ms-rehydrate-priority, Standard, High
. Rehydrate blob by copying data to higher tier container/storage account, or modify the blob/container tier
* Work with blob storage
. BlobServiceClient, BlobContainerClient, BlobClient

**AZ-204: Implement Azure Functions
. Jargon : Hosting options, bindings, triggers, Azure Virtual Network, App Service Environment (ASE).
* Explore Azure Functions
. Data processing, systems integration
. Azure Functions, Logic Apps, Web Jobs
. Triggers : to start execution of the function
. Bindings : For input and output of data
. Orchestration : Collection of functions or steps
. Triggers
  Timer
  Azure Storage queues and blobs
  Azure Service Bus queues and topics
  Azure Cosmos DB
  Azure Event Hubs
  HTTP/WebHook
  Azure Event Grid
*Azure functions hosting options
 . Consumption plan, flex consumption plan, premium plan, dedicated plan, container apps
****Pending Revisit the various azure function hosting plans and differences between them.

*Develop Azure Functions
. 
.
.
.
.
.
.












